{"version":3,"file":"vue.js","sources":["../src/utils.js","../src/globalAPI.js","../src/compiler/parse.js","../src/compiler/codegen.js","../src/compiler/index.js","../src/observe/dep.js","../src/observe/watcher.js","../src/vdom/index.js","../src/lifecycle.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["const strats = {};//策略模式\r\nconst LIFECYCLE = [\r\n    'beforeCreate', 'created',\r\n];\r\nLIFECYCLE.forEach(hook => {\r\n    strats[hook] = function (p, c) {\r\n        if (c) {// 如果儿子有父亲有，父是数组\r\n            if (p) {\r\n                return p.concat(c)\r\n            } else {\r\n                // 父不是数组，儿子是数组\r\n                return [c]\r\n            }\r\n        } else {\r\n            // 没有儿子，直接返回\r\n            return p;\r\n        }\r\n    }\r\n});\r\n// strats.data = function () { }\r\n// strats.computed = function () { }\r\n// strats.watch = function () { }\r\n\r\n \r\nexport function mergeOptions(parent, child) {\r\n    const options = {};\r\n    for (let key in parent) {\r\n        mergeField(key);\r\n    }\r\n    for (let key in child) {\r\n        if (!parent.hasOwnProperty(key)) {\r\n            mergeField(key)\r\n        }\r\n    }\r\n    function mergeField(key) {\r\n        if (strats[key]) {\r\n            options[key] = strats[key](parent[key], child[key]);\r\n        } else {\r\n            // 不在策略中以儿子为主\r\n            options[key] = child[key] || parent[key];\r\n        }\r\n    }\r\n    return options;\r\n}","import { mergeOptions } from \"./utils\";\r\n\r\nexport function initGlobalAPI(Vue) {\r\n\r\n    \r\n    // 静态方法\r\n    Vue.options = {};\r\n    \r\n    Vue.mixin = function (mixin) {\r\n        // 用户的选项和全局的options合并\r\n        this.options = mergeOptions(this.options, mixin);\r\n        return this;\r\n    }\r\n}\r\n","// 匹配 a-zA-Z_其中的一个 匹配多个满足 -.0-9_a-zA-Z\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;//?可有可无\r\n\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`);// <div | <a:b\r\n// console.log(startTagOpen);// 匹配到一个标签名\r\nconst endTag =  new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);// </div |></div:aa>\r\n// console.log(endTag);// \r\n\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>']+)))?/;\r\n// console.log(attribute);// dd=\"bb\" 一共五个分组 匹配345分组\r\nconst startTagClose = /^\\s*(\\/?)>/;\r\n// console.log(startTagClose);// div> | br/>\r\nexport const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\r\n// console.log(defaultTagRE);//{{}}\r\n\r\n    \r\nexport const TYPES = {\r\n  ELEMENT_TYPE:1,\r\n  TEXT_TYPE:3\r\n}\r\n/**\r\n * 解析html,生成抽象语法树\r\n * @param {带解析的html} html \r\n * @returns node\r\n */\r\nexport function parseHTML(html){\r\n    const stack = [];// 用于存放元素；由 start,chars,end三个方法共同构建的树\r\n    let currentParent;// 指向栈中的最后一个元素\r\n    \r\n    // 最终的抽象语法树\r\n    let root;// 根节点\r\n    /**\r\n     * 创建一个抽象节点\r\n     * @param {元素标签名} tag \r\n     * @param {元素属性} attrs \r\n     * @returns 返回一个对象\r\n     */\r\n    function createASTElement(tag,attrs){\r\n        return {\r\n            tag,\r\n            type:TYPES.ELEMENT_TYPE,\r\n            children:[],\r\n            attrs,\r\n            parent:null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理解析匹配到的开始标签和内容\r\n     * @param {匹配开始标签名} tag \r\n     * @param {匹配开始标签属性} attrs \r\n     */\r\n    function start(tag,attrs){\r\n        // console.log(tag,attrs,\"开始\");\r\n        let node = createASTElement(tag,attrs);\r\n        if(!root){// 看一下是否是空树\r\n            root = node;// 如果为空则当前节点为树根\r\n        }\r\n        // 如果有就添加\r\n        if(currentParent){\r\n            node.parent = currentParent;\r\n            // 把自己添加给父元素\r\n            currentParent.children.push(node);\r\n        }\r\n        stack.push(node);\r\n        currentParent = node;\r\n    }\r\n    /**\r\n     * 处理解析匹配到的文本\r\n     * @param {匹配到的文本} text \r\n     */\r\n    function chars(text){\r\n        // console.log(text,\"文本\");\r\n        text.replace(/\\s/g,'') && currentParent.children.push({\r\n            type:TYPES.TEXT_TYPE,\r\n            text,\r\n            parent:currentParent\r\n        })\r\n    }\r\n    /**\r\n     * 处理解析匹配到的结束标签标签\r\n     * @param {匹配结束标签名} tag \r\n     */\r\n    function end(tag){\r\n        // console.log(tag,\"结束\");\r\n        let node = stack.pop();// 弹出最后一个元素\r\n        // 更新currentParent\r\n        currentParent = stack[stack.length-1];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {缩短的距离} len \r\n     */\r\n    function advance(len){  \r\n        html = html.substring(len);\r\n    }\r\n    /**\r\n     * 将html中的开始标签中的 标签名 和属性解析出来\r\n     * 并删除匹配到的内容\r\n     * @returns {{tagName:'',attrs:[]}}\r\n     */\r\n    function parseStartTag(){\r\n        let start = html.match(startTagOpen);\r\n        if(start){\r\n            const match = {\r\n                tagName:start[1],// 标签名命名\r\n                attrs:[]\r\n            }\r\n            advance(start[0].length)\r\n\r\n            // 如果不是结束标签就一直匹配\r\n            let attr,end;\r\n            while(\r\n                !(end = html.match(startTagClose)) && \r\n                (attr = html.match(attribute))\r\n            ){\r\n                advance(attr[0].length);\r\n                // console.log({\r\n                //     name:attr[1],\r\n                //     value:attr[3]||attr[4]||attr[5]\r\n                //   });\r\n                match.attrs.push({\r\n                    name:attr[1],\r\n                    value:attr[3]||attr[4]||attr[5]\r\n                })\r\n            }\r\n            if(end){\r\n                advance(end[0].length)\r\n            }\r\n            // console.log(html);// 将< id=\"app\">内容解析完毕\r\n            return match;\r\n        }\r\n\r\n        return false;// 不是开始标签\r\n    }\r\n    // 当html被截取完了就停止了\r\n    while(html){\r\n        // console.log(html.indexOf('<'));<div>123</div>\r\n        // 如果indexOf中的索引是0，说明是个标签，\r\n        // 如果indexOf中的索引>0，则说明是结束标签位置\r\n        let textEnd = html.indexOf('<');\r\n        if(textEnd === 0){\r\n            const startTagMatch = parseStartTag();\r\n            if(startTagMatch){\r\n                // console.log(\"开始标签 和属性\",startTagMatch);\r\n\r\n                start(startTagMatch.tagName,startTagMatch.attrs)\r\n                // 跳过本次循环\r\n                continue;\r\n            }\r\n\r\n            // 第一次匹配开始标签，后面的循环会进入匹配结束标签\r\n            const endTagMatch = html.match(endTag);\r\n            if(endTagMatch){\r\n                // console.log(\"结束标签\",endTagMatch);\r\n                end(endTagMatch[1]);\r\n                advance(endTagMatch[0].length);\r\n                continue;\r\n            }\r\n        }\r\n        //>0 textEnd是下一次循环的重新获得的值\r\n        if(textEnd>0){\r\n            // 继续截取文本内容 (中间可能是文本，或者空格)\r\n            let text = html.substring(0,textEnd);// 匹配到的文本\r\n            if(text){\r\n                chars(text);\r\n                advance(text.length);\r\n                // console.log(\"匹配到的文本:\",text);\r\n                // console.log(\"待解析的字符串:\",html);\r\n            }\r\n        }\r\n    }\r\n    // console.log(html,root);\r\n    return root;\r\n}","import { TYPES,defaultTagRE } from \"./parse.js\";\r\n/**\r\n * 解析抽象语法树中的属性\r\n * @param {属性} attrs \r\n * @returns \r\n */\r\nfunction genProps(attrs){\r\n    let str = '';// {name,value}\r\n    for(let i=0;i<attrs.length;i++){\r\n        let attr = attrs[i];\r\n        if(attr.name === 'style'){\r\n            let obj = {};\r\n            attr.value.split(\";\").forEach(item=>{\r\n                let [key,value] = item.split(':');\r\n                obj[key] = value;\r\n            })\r\n            attr.value = obj;\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},`\r\n    }\r\n    return `{${str.slice(0,-1)}}`;\r\n}\r\n/**\r\n * 处理元素节点继续转换成抽象语法树\r\n * 处理文本节点\r\n * @param {*} node \r\n * @returns \r\n */\r\nfunction gen(node){\r\n    \r\n    if(node.type=== TYPES.ELEMENT_TYPE){// ele:1,text:3\r\n        return codegen(node);\r\n    }else{\r\n        // 文本\r\n        \r\n        let text = node.text.trim()\r\n        // test方法会向后继续匹配\r\n        if(!defaultTagRE.test(text)){\r\n            // console.log(text,\"没有{{}}\");\r\n            return `_v(${JSON.stringify(text)})`\r\n        }else{\r\n            // console.log(text,\"包含{{}}\");\r\n            let tokens = [];\r\n            let match;\r\n            defaultTagRE.lastIndex = 0;\r\n            let lastIndex = 0;\r\n            while(match = defaultTagRE.exec(text)){\r\n                // console.log(match[1]);\r\n                let index = match.index;// 匹配的位置{{name}}123{{age}}456789\r\n                // console.log('-'+text+'-','====',match,\"==\",index,\"匹配的索引位置\");\r\n                if(index>lastIndex){\r\n                    // 123\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex,index)))\r\n                }\r\n                // {{name}}\r\n                tokens.push(`_s(${match[1].trim()})`);\r\n                lastIndex = index + match[0].length;\r\n            }\r\n            if(lastIndex<text.length){\r\n                // 456789\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n            }\r\n            return `_v(${tokens.join('+')})`\r\n\r\n        }\r\n    }\r\n}\r\n/**\r\n * 解析语法树中的孩子\r\n * @param {抽象语法树中的函数} children \r\n * @returns \r\n */\r\nfunction genChildren(children){\r\n    if(children){\r\n        return children.map(child=>gen(child)).join(',')\r\n    }\r\n}\r\n/**\r\n * 通过抽象语法树产生render函数\r\n * @param {抽象语法树} {tag: 'div', type: 1, children: Array(3), attrs: [{name:aa,value:bb}], parent: null}\r\n * @returns // _c(节点，属性，孩子)\r\n */\r\nexport function codegen(ast){\r\n    let children = genChildren(ast.children);\r\n    // _c(节点，属性，孩子)\r\n    let code = (`_c('${ast.tag}',${\r\n        ast.attrs.length>0?genProps(ast.attrs):'null'}${\r\n        ast.children.length ? `,${children}`:''\r\n    })`);\r\n    // console.log(code);\r\n    return code\r\n}","import { parseHTML } from \"./parse.js\";\r\nimport { codegen } from \"./codegen\";\r\n\r\n/**\r\n * 将template转换为ast语法树\r\n * 将ast抽象语法树 转换成 模板字符串 \r\n * 将模板字符串 封装成 render函数\r\n * @param {带解析的模板} template \r\n */\r\nexport function compileToFunction(template){\r\n\r\n    let ast = parseHTML(template);\r\n    // console.log(ast);\r\n    // 将抽象语法树，转换为render函数 _c创建元素，_v创建文本 _s=>JSON.stringif()\r\n    // 模板引擎的原理，with + new Function\r\n    let code = codegen(ast);\r\n    code = `with(this){\r\n        return ${code};\r\n    }`;\r\n    // 根据代码生成render函数\r\n    let render = new Function(code);\r\n    return render;\r\n    \r\n}","let id = 0;\r\n\r\n/**\r\n * 为每个响应式数据Dep\r\n */\r\nclass Dep{\r\n    constructor(){\r\n        this.id = id++;//属性的dep要收集watcher\r\n        this.subs = [];// 这里存放着当前属性对应的watcher有哪些\r\n    }\r\n    /**\r\n     * 响应式数据get的时候，dep会收集当前watcher\r\n     */\r\n    depend(){\r\n        // 收集watcher之前，让当前watcher记录当前dep\r\n        // 收集watcher 处理一个存放多个相同的watcher问题\r\n        // 当watcher记录dep\r\n        Dep.target.addDep(this);// 将当前dep实例 传给调用 挂载组件时候调用的 Watcher\r\n\r\n    }\r\n    /**\r\n     * 收集watcher\r\n     * @param {*} watcher \r\n     */\r\n    addSub(watcher){\r\n        this.subs.push(watcher);\r\n        // console.log(this.subs);\r\n    }\r\n    /**\r\n     * 通知更新\r\n     */\r\n    notify(){\r\n        this.subs.forEach(watcher=>{\r\n            watcher.update()\r\n        })\r\n    }\r\n}\r\n// 静态属性，只有一份\r\nDep.target = null;\r\nexport default Dep;","import Dep from \"./dep\";\r\n\r\nlet id = 0;\r\n/**\r\n * 1.当我们创建渲染watcher的时候，我们会把当前的渲染watcher放到Dep.target上\r\n * 2.调用_render（）会取值 走到get上\r\n */\r\n\r\nclass Watcher{\r\n    /**\r\n     * \r\n     * @param {当前实例} vm \r\n     * @param {渲染函数} fn \r\n     */\r\n    constructor(vm,fn,options){// 不同组件，有不同的watcher，目前只有一个根实例\r\n        this.id = id++;\r\n        this.renderWatcher = options;// boolean 表示是否是一个渲染Watcher\r\n        this.getter = fn;// 意味着调用这个函数可以发生取值操作，_render()\r\n        this.deps = [];// 一个watcher存放多个dep 后续实现计算属性，和一些清理工作需要用到\r\n        this.depsId = new Set();\r\n        this.get();\r\n    }\r\n    /**\r\n     * 让当前watcher记录dep\r\n     * @param {*} dep \r\n     */\r\n    addDep(dep){// 一个组件对应多个属性，重复的属性也不用重复记录\r\n        let id = dep.id;\r\n        if(!this.depsId.has(id)){\r\n            this.deps.push(dep);\r\n            this.depsId.add(id);\r\n            dep.addSub(this); // watcher已经记住dep了而且去重了，此时让dep也记住watcher\r\n        }\r\n        // console.log(this.deps);\r\n    }\r\n    /**\r\n     * 调用这个方法会触发响应式数据get方法-》触发dep收集-》\r\n     */\r\n    get(){\r\n        // 静态属性\r\n        Dep.target = this;// 将watcher实例挂载到dep身上\r\n        this.getter();// 去vm上取值 触发响应式数据get -》触发dep收集\r\n        Dep.target = null;// 清空实例\r\n    }\r\n    /**\r\n     * 重新渲染\r\n     */\r\n    update(){\r\n        // 实现异步更新\r\n        // this.get();\r\n        queueWatcher(this);// 暂存当前的watcher\r\n    }\r\n    run(){\r\n        this.get()\r\n    }\r\n}\r\n\r\nlet queue = [];\r\nlet has = {};\r\nlet pending = false;// 防抖\r\n\r\n/**\r\n * 刷新调度队列\r\n */\r\nfunction flushSchedulerQueue(){\r\n    let flushQueue = queue.slice(0); \r\n    queue = [];\r\n    has = [];\r\n    pending = false;\r\n    flushQueue.forEach(q=>q.run());\r\n}\r\n\r\n/**\r\n * 收集传入的watcher\r\n * @param {Watcher} watcher \r\n */\r\nfunction queueWatcher(watcher){\r\n    const id = watcher.id;\r\n    if(!has[id]){\r\n        queue.push(watcher);\r\n        has[id] = true;\r\n        // 不管__update执行多少次，但是最终只执行一轮更新\r\n        if(!pending){\r\n            nextTick(flushSchedulerQueue);\r\n            pending = true;\r\n        }\r\n    }\r\n}\r\n\r\nlet callbacks = [];\r\nlet waiting = false;\r\nfunction flushCallback(){\r\n    waiting = false;\r\n    let cbs = callbacks.slice(0);\r\n    callbacks = [];\r\n    cbs.forEach(cb=>cb());\r\n}\r\n/**\r\n * 异步更新函数\r\n * @param {Function} cb 刷新调度队列\r\n */\r\nexport function nextTick(cb){\r\n    callbacks.push(cb);\r\n    if(!waiting){\r\n        setTimeout(()=>{\r\n            flushCallback()\r\n        },0)\r\n    };\r\n    waiting = true;\r\n}\r\n\r\n// 需要给**每个属性**增加一个dep，目的就是收集watcher\r\n// 一个视图（组件）中 有多少个属性 （n个属性会对应一个视图）===》n个dep对应一个watcher\r\n// 一个属性 对应多个视图（组件）==》 一个dep对应多个组件 wacher\r\n// 多对多关系\r\nexport default Watcher;","\r\n/**\r\n * h(),_c()\r\n * 创建虚拟元素节点\r\n * data=>attrs\r\n */\r\nexport function createElementVNode(vm,tag,data={},...children){\r\n    let key = data?.key;\r\n    if(key){\r\n        delete data.key\r\n    }\r\n    return vNode(vm,tag,key,data,children)\r\n}\r\n/**\r\n * _v()\r\n * 创建虚拟文本节点\r\n */\r\nexport function createTextVNode(vm,text){\r\n    return vNode(vm,undefined,undefined,undefined,undefined,text)\r\n}\r\n/**\r\n * ast做语法层面的转换 描述的是语法本身 div name:value v-for（js css html）\r\n * 虚拟dom描述的是dom元素，可以增加一些自定义属性 描述dom\r\n * \r\n * @param {*} vm \r\n * @param {*} tag \r\n * @param {*} key \r\n * @param {*} data \r\n * @param {*} children \r\n * @param {*} text \r\n * @returns \r\n */\r\nfunction vNode(vm,tag,key,data,children,text){\r\n    return {\r\n        vm,\r\n        tag,\r\n        key,\r\n        data,\r\n        children,\r\n        text\r\n    }\r\n}","import Watcher from \"./observe/watcher\";\r\nimport { createElementVNode, createTextVNode } from \"./vdom/index\"\r\n\r\nfunction patchProps(el,props){\r\n\tfor(let key in props){\r\n\t\tif(key === 'style'){\r\n\t\t\tfor(let styleName in props.style){\r\n\t\t\t\tel.style[styleName] = props.style[styleName]\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tel.setAttribute(key,props[key]);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\nfunction createElm(vNode){\r\n\tlet {tag,data,children,text} = vNode;\r\n\tif(typeof tag === 'string'){\r\n\t\t// 将真实节点和虚拟节点对应起来，后续修改了属性方便更新\r\n\t\tvNode.el = document.createElement(tag);\r\n\t\t// console.log(vNode.el);\r\n\t\t// 更新真实节点上的元素属性\r\n\t\tpatchProps(vNode.el,data);\r\n\t\tchildren.forEach(child=>{\r\n\t\t\tvNode.el.appendChild(createElm(child));\r\n\t\t})\r\n\t}else{\r\n\t\tvNode.el = document.createTextNode(text);\r\n\t}\r\n\treturn vNode.el;\r\n}\r\n\r\nfunction patch(oldVnode,vNode){\r\n\t// 初渲染流程\r\n\tconst isRealElement = oldVnode.nodeType;\r\n\tif(isRealElement){\r\n\t\tconst elm = oldVnode;// 获取真实节点\r\n\t\tconst parentElm = elm.parentNode;// 拿到父元素\r\n\t\tlet newElm = createElm(vNode);\r\n\t\tparentElm.insertBefore(newElm,elm.nextSibling)\r\n\t\tparentElm.removeChild(elm);\r\n\t\treturn newElm;\r\n\t}else{\r\n\t\t// diff算法\r\n\t}\r\n}\r\n\r\n/**\r\n * 给Vues实例身上拓展方法\r\n * @param {*} Vue \r\n */\r\nexport function initLifeCycle(Vue){\r\n\t// render函数\r\n\t/**\r\n\t *   _c(\r\n\t * \t\t'div',\r\n\t * \t\t{\r\n\t * \t\t\tid:\"app\",\r\n\t * \t\t\tstyle:{\r\n\t * \t\t\t\t\"color\":\"yellow\",\r\n\t * \t\t\t\t\"font-size\":\" 24px\"\r\n\t * \t\t\t}\r\n\t * \t\t},\r\n\t * \t\t_v(\"我是一段文字\"),\r\n\t * \t\t_c(\r\n\t * \t\t\t'div',\r\n\t * \t\t\t{\r\n\t * \t\t\t\tstyle:{\r\n\t * \t\t\t\t\t\"color\":\"red\"\r\n\t * \t\t\t\t}\r\n\t * \t\t\t},\r\n\t * \t\t\t_v(_s(id)+\"hello\"+_s(name)+\"456789\")\r\n\t * \t\t),\r\n\t * \t\t_c(\r\n\t * \t\t\t'span',\r\n\t * \t\t\tnull,\r\n\t * \t\t\t_v(\"world\")\r\n\t * \t\t)\r\n\t * \t);\r\n\t*/\r\n\tVue.prototype._c = function(){\r\n\t\treturn createElementVNode(this,...arguments)\r\n\t}\r\n\r\n\tVue.prototype._v = function(){\r\n\t\treturn createTextVNode(this,...arguments)\r\n\t}\r\n\r\n\tVue.prototype._s = function(value){\r\n\t\tif(typeof value !== 'object'){\r\n\t\t\treturn (value)\r\n\t\t}\r\n\t\treturn JSON.stringify(value)\r\n\t}\r\n\r\n\t/**\r\n\t * 将虚拟节点转换成真实节点\r\n\t */\r\n\tVue.prototype._update = function(vNode){\r\n\t\t// console.log(\"update\",vNode);\r\n\t\tconst vm = this;\r\n\t\tconst el = vm.$el;\r\n\t\t// console.log(vNode);\r\n\t\t// console.log(el);\r\n\t\t// 既有初始化的功能，又有更新的功能\r\n\t\tvm.$el = patch(el,vNode);// 拿到渲染完成后的新元素\r\n\t}\r\n\r\n\tVue.prototype._render = function(){\r\n\t\tconst vm = this;\r\n\t\t// console.log(\"render函数\",vm.$options.render.toString());\r\n\t\t// console.log(typeof vm.$options.render);\r\n\t\t// 熏染的时候，会从实例中取值\r\n\t\t// 可以将属性和视图绑定起来\r\n\t\treturn vm.$options.render.call(vm);\r\n\t}\t\r\n}\r\n/**\r\n * \r\n * @param {vue实例} vm \r\n * @param {渲染根节点} el \r\n */\r\nexport function mountComponent(vm,el){\r\n\tvm.$el = el;\r\n\r\n\tconst updateComponent = ()=>{\r\n\t\t// 1.调用render方法产生虚拟节点 虚拟dom\r\n\t\tlet vmDom = vm._render();// vm.$options.render()\r\n\t\t// 2、根据虚拟DOM产生真实dom\r\n\t\tvm._update(vmDom);// 3.将真实dom插入到el元素中\r\n\t}\r\n\tnew Watcher(vm,updateComponent,true);// true表示是一个渲染Watcher\r\n\t\r\n}\r\n// 创造响应式数据，\r\n// 模板转换成ast语法树，\r\n// 将ast树转换为render函数[模板字符串拼接成的render函数](产生虚拟节点，使用响应式数据)，render产生虚拟dom\r\n// 每次节点更新可以只执行render函数\r\n// 根据虚拟节点创造真实dom\r\n\r\nexport function callHook(vm,hook){\r\n\tconst handlers = vm.$options[hook];\r\n\tif(handlers){\r\n\t\thandlers.forEach(handler=>handler.call(vm))\r\n\t}\r\n}","// 重写数组中的部分方法\r\n\r\nlet oldArrayProto = Array.prototype;// 获取数组的原型\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\nlet methods = [// 找到所有的变异方法\r\n  'push','pop','shift','unshift','reverse','sort','splice'\r\n];\r\n// concat slice 不会改变原来的数据\r\nmethods.forEach(method=>{\r\n  // 代理newArrayProto身上的方法\r\n  newArrayProto[method] = function(...args){// 重写数组的方法\r\n    // console.log(\"method\",method);\r\n    // console.log(\"args\",args);\r\n    // 内部调用原来的方法 函数的劫持，切片编程\r\n    const result = oldArrayProto[method].call(this,...args);\r\n    // 对新添加的数据，再次进行劫持\r\n    let inserted;// 需要进行劫持的代码\r\n    let ob = this.__ob__;// 拿到Observe\r\n    switch(method){\r\n      case 'push':\r\n      case 'unshift':\r\n        inserted = args;\r\n        break;\r\n      case 'splice': // arr.splice(0,1,{a:1},{b:2})\r\n        // 前两个参数是方法用的，需要截取一下，获取实际参数\r\n        inserted = args.slice(2)\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"inserted\",inserted);\r\n    if(inserted){\r\n      // 对新增的内容进行观测\r\n      ob.observeArray(inserted)\r\n    }\r\n    // 更新\r\n    ob.dep.notify();// 数组变化了通知对应的watcher实现更新\r\n    return result;\r\n  }\r\n})","import { newArrayProto } from \"./array\";\r\nimport Dep from \"./dep\";\r\n\r\n/**\r\n * 该对象上有一些方法，调用这些方法可以对数据进行响应式代理\r\n */\r\nclass Observe {\r\n\t// 一开始进入该方法，一定是一个对象，然后才是其他东西\r\n\tconstructor(data) {\r\n\t\t// data可能是对象，也可能是数组\r\n\t\t// 给每个对象都增加依赖收集 给数组或对象增加东西的时候可以通过dep异步更新\r\n\t\tthis.dep = new Dep();\r\n\r\n\t\t// 想当于给数据加了一个标识，如果数据上有这个属性，说明被观测过\r\n\t\t// data.__ob__ = this;// Observe对象挂载到数据身上，方便使用\r\n\t\tObject.defineProperty(data, '__ob__', {\r\n\t\t\tvalue: this,\r\n\t\t\tenumerable: false\r\n\t\t})\r\n\t\t// 判断用户是否是一个数组\r\n\t\tif (Array.isArray(data)) {\r\n\t\t\t// 重写数组的方法 7的变异方法 可以修改数组本身\r\n\t\t\t// 调用data向上查询方法的时候，被调用被劫持的函数\r\n\t\t\tdata.__proto__ = newArrayProto;\r\n\t\t\t// \"[a,{b:13}]\",数组中的对象要进行响应式劫持\r\n\t\t\tthis.observeArray(data);\r\n\t\t} else {// 不是数组的情况\r\n\t\t\tthis.walk(data);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * 循环该对象所有keys，对所有属性进行代理劫持\r\n\t * @param {待劫持的数据对象} data \r\n\t */\r\n\twalk(data) {\r\n\t\t// 重新定义属性\r\n\t\tObject.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n\t}\r\n\t/**\r\n\t * 监听数组中的对象数据\r\n\t * @param {待监听的数据} data \r\n\t */\r\n\tobserveArray(data) {\r\n\t\t// 对数组中的 对象 数据进行监听，不是对象的数据\r\n\t\t// 被observe return掉了\r\n\t\tdata.forEach(item => observe(item))\r\n\t}\r\n}\r\nfunction dependArray(value){\r\n\tfor (let index = 0; index < value.length; index++) {\r\n\t\tlet current = value[index];\r\n\t\tcurrent.__ob__?.dep.depend();\r\n\t\tif(Array.isArray(current)){\r\n\t\t\tdependArray(current);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * 代理数据\r\n * @param {重新定义数据的目标} target \r\n * @param {目标的key} key \r\n * @param {目标的value} value \r\n */\r\nexport function defineReactive(target, key, value) {\r\n\t// 使用递归，对值为对象的数据，再次进行劫持\r\n\t// 内部进行判断，如果value不是对象，则结束调用\r\n\tlet childOb = observe(value);// childOb.dep用来依赖收集\r\n\tlet dep = new Dep();// 给每个属性增加一个dep\r\n\tObject.defineProperty(target, key, {\r\n\t\t// 取值的时候\r\n\t\tget() {\r\n\t\t\tif (Dep.target) {\r\n\t\t\t\tdep.depend();// 让这个属性的收集器记住当前watcher\r\n\t\t\t\tif(childOb){\r\n\t\t\t\t\tchildOb.dep.depend();//让数组本身也实现依赖收集 让watcher记住这个dep\r\n\t\t\t\t\tif(Array.isArray(value)){\r\n\t\t\t\t\t\tdependArray(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\t// 修改的时候\r\n\t\tset(newValue) {\r\n\t\t\tif (newValue === value) return;\r\n\t\t\t// 如果设置的值是一个对象，继续进行代理\r\n\t\t\tobserve(newValue);\r\n\t\t\tvalue = newValue;\r\n\t\t\tdep.notify();//通知更新\r\n\t\t}\r\n\t})\r\n\r\n}\r\n/**\r\n * 劫持用户的数据，进行响应式代理\r\n * 会判断用户的数据里面是不是还是对象\r\n * 如果还是对象，则会递归调用代理\r\n * @param {用户选项data中的数据} data \r\n */\r\nexport function observe(data) {\r\n\tif (typeof data !== 'object' || data === null) {\r\n\t\treturn;// 只对对象做劫持\r\n\t}\r\n\r\n\t// 如果一个对象被劫持了，那就不需要再被劫持了\r\n\t// 要判断一个对象是否被劫持过了，\r\n\t// 可以增添一个实例，用实例来判断是否被劫持过\r\n\tif (data.__ob__ instanceof Observe) {\r\n\t\t// 标识该对象已经被代理过了\r\n\t\treturn data.__ob__;\r\n\t}\r\n\r\n\treturn new Observe(data);\r\n}","import { observe } from \"./observe/index\";\r\n\r\n/**\r\n * 初始化用户状态 data,props,methods,watch...\r\n * @param {Vue实例对象} vm \r\n */\r\nexport function initState(vm){\r\n  const opts = vm.$options;// 获取所有的选项\r\n  // if(opts.props){\r\n  //   initProps\r\n  // }\r\n  if(opts.data){\r\n    initData(vm)\r\n  }\r\n}\r\n/**\r\n * \r\n * @param {实例} vm \r\n * @param {代理数据} target \r\n * @param {代理数据的key} key \r\n */\r\nfunction proxy(vm,target,key){\r\n  // vm.name ==> vm._data.name\r\n  Object.defineProperty(vm,key,{\r\n    get(){\r\n      return vm[target][key]\r\n    },\r\n    set(newValue){\r\n      vm[target][key] = newValue\r\n    }\r\n  })\r\n}\r\n/**\r\n * 对 options.data 数据进行响应式拦截\r\n * @param {Vue实例对象} vm \r\n */\r\nfunction initData(vm){\r\n  // 将对象上的数据重新 赋值了一份，data和源对象断开连接\r\n  let data = vm.$options.data;// 可能是函数或对象\r\n  data = typeof data === 'function'?data.call(vm):data;\r\n  // 给实例对象设置上data，可以获取到代理劫持后的数据\r\n  vm._data = data\r\n  // 对数据进行劫持 vue2采用defineProperty\r\n  observe(data);\r\n  // 将vm._data上的所有数据代理直接代理到实例对象上\r\n  for(let key in data){\r\n    proxy(vm,'_data',key)\r\n  }\r\n\r\n}","import { compileToFunction } from \"./compiler/index\";\r\nimport { callHook, mountComponent } from \"./lifecycle\";\r\nimport { initState } from \"./state\";\r\nimport { mergeOptions } from \"./utils\";\r\n\r\n/**\r\n * 用于给Vue实例身上拓展方法\r\n * @param {Vue实例对象} Vue \r\n */\r\nexport function initMixin(Vue) {\r\n\t/**\r\n\t * 用于初始化操作\r\n\t */\r\n\t\r\n\tVue.prototype._init = function (options) {\r\n\t\tconst vm = this;\r\n\t\t// 将用户传入的配置数据装载到Vue实例身上，方便其他方法获取配置数据\r\n\t\t// 将vue.$mixin上面的数据，和用户传入的数据混入到一起\r\n\t\tvm.$options = mergeOptions(this.constructor.options,options);// 混入\r\n\r\n\t\tcallHook(vm,'beforeCreate')\r\n\r\n\t\tinitState(vm);\r\n\r\n\t\tcallHook(vm,'create')\r\n\r\n\t\tif (options.el) {\r\n\t\t\tvm.$mount(options.el)\r\n\t\t}\r\n\r\n\t}\r\n\t/**\r\n\t * 对根元素，或者自定义模板，进行模板解析\r\n\t * @param {根元素} el \r\n\t */\r\n\tVue.prototype.$mount = function (el) {\r\n\t\t// console.log(el);\r\n\t\tconst vm = this;\r\n\t\tel = document.querySelector(el);\r\n\t\tlet ops = vm.$options;\r\n\t\t// 如果没有render函数\r\n\t\tif (!ops.render) {\r\n\t\t\tlet template;\r\n\t\t\t// 没有写模板，但是有el，使用 #app内部的元素作为模板渲染数据\r\n\t\t\tif (!ops.template && el) {\r\n\t\t\t\ttemplate = el.outerHTML\r\n\t\t\t} else {\r\n\t\t\t\t// 写了模板\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\ttemplate = ops.template\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (template) {\r\n\t\t\t\t// 需要对模板进行编译 生成render函数(由模板语法组成的函数)，\r\n\t\t\t\t// 调用render函数 通过模板语法产生虚拟节点\r\n\t\t\t\tconst render = compileToFunction(template);\r\n\t\t\t\tops.render = render;// jsx 最终会被 编译成h('xxx')\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 有render方法\r\n\t\t// ops.render;// 最终就获取render方法\r\n\t\tmountComponent(vm, el);// 组件的挂载\r\n\t}\r\n\r\n}\r\n","import { initGlobalAPI } from \"./globalAPI\";\r\nimport { initMixin } from \"./init\";\r\nimport { initLifeCycle } from \"./lifecycle\";\r\nimport { nextTick } from \"./observe/watcher\";\r\n\r\n\r\n\r\n/**\r\n * options:用户传入的选项 data,methods,computed,mounted....\r\n * \r\n */\r\nfunction Vue(options){\r\n  // initMixin在Vue对象上拓展的_init方法的方法\r\n  this._init(options)\r\n}\r\nVue.prototype.$nextTick = nextTick;\r\n\r\ninitMixin(Vue);\r\n\r\ninitLifeCycle(Vue);\r\n\r\ninitGlobalAPI(Vue);\r\n\r\n\r\n\r\n\r\nexport default Vue;\r\n"],"names":["strats","LIFECYCLE","forEach","hook","p","c","concat","mergeOptions","parent","child","options","key","mergeField","hasOwnProperty","initGlobalAPI","Vue","mixin","ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","defaultTagRE","TYPES","ELEMENT_TYPE","TEXT_TYPE","parseHTML","html","stack","currentParent","root","createASTElement","tag","attrs","type","children","start","node","push","chars","text","replace","end","pop","length","advance","len","substring","parseStartTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","_loop","i","obj","split","item","_item$split","_item$split2","_slicedToArray","JSON","stringify","slice","gen","codegen","trim","test","tokens","lastIndex","exec","index","join","genChildren","map","ast","code","compileToFunction","template","render","Function","id","Dep","_classCallCheck","subs","_createClass","depend","target","addDep","addSub","watcher","notify","update","Watcher","vm","fn","renderWatcher","getter","deps","depsId","Set","get","dep","has","add","queueWatcher","run","queue","pending","flushSchedulerQueue","flushQueue","q","nextTick","callbacks","waiting","flushCallback","cbs","cb","setTimeout","createElementVNode","data","arguments","undefined","_len","Array","_key","vNode","createTextVNode","patchProps","el","props","styleName","style","setAttribute","createElm","document","createElement","appendChild","createTextNode","patch","oldVnode","isRealElement","nodeType","elm","parentElm","parentNode","newElm","insertBefore","nextSibling","removeChild","initLifeCycle","prototype","_c","apply","call","_v","_s","_typeof","_update","$el","_render","$options","mountComponent","updateComponent","vmDom","callHook","handlers","handler","oldArrayProto","newArrayProto","Object","create","methods","method","_oldArrayProto$method","args","result","inserted","ob","__ob__","observeArray","Observe","defineProperty","enumerable","isArray","__proto__","walk","keys","defineReactive","observe","dependArray","_current$__ob__","current","childOb","set","newValue","initState","opts","initData","proxy","_data","initMixin","_init","constructor","$mount","querySelector","ops","outerHTML","$nextTick"],"mappings":"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"}