{"version":3,"file":"vue.js","sources":["../src/compiler/index.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["// 匹配 a-zA-Z_其中的一个 匹配多个满足 -.0-9_a-zA-Z\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;//?可有可无\r\n\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`);// <div | <a:b\r\n// console.log(startTagOpen);// 匹配到一个标签名\r\nconst endTag =  new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);// </div |></div:aa>\r\n// console.log(endTag);// \r\n\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>']+)))?/;\r\n// console.log(attribute);// dd=\"bb\" 一共五个分组 匹配345分组\r\nconst startTagClose = /^\\s*(\\/?)>/;\r\n// console.log(startTagClose);// div> | br/>\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\r\n// console.log(defaultTagRE);//{{}}\r\n\r\n/**\r\n * 解析html,生成抽象语法树\r\n * @param {带解析的html} html \r\n * @returns node\r\n */\r\nfunction parseHTML(html){\r\n    const TYPES = {\r\n        ELEMENT_TYPE:1,\r\n        TEXT_TYPE:3\r\n    }\r\n    const stack = [];// 用于存放元素；由 start,chars,end三个方法共同构建的树\r\n    let currentParent;// 指向栈中的最后一个元素\r\n    \r\n    // 最终的抽象语法树\r\n    let root;// 根节点\r\n    /**\r\n     * 创建一个抽象节点\r\n     * @param {元素标签名} tag \r\n     * @param {元素属性} attrs \r\n     * @returns 返回一个对象\r\n     */\r\n    function createASTElement(tag,attrs){\r\n        return {\r\n            tag,\r\n            type:TYPES.ELEMENT_TYPE,\r\n            children:[],\r\n            attrs,\r\n            parent:null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理解析匹配到的开始标签和内容\r\n     * @param {匹配开始标签名} tag \r\n     * @param {匹配开始标签属性} attrs \r\n     */\r\n    function start(tag,attrs){\r\n        // console.log(tag,attrs,\"开始\");\r\n        let node = createASTElement(tag,attrs);\r\n        if(!root){// 看一下是否是空树\r\n            root = node;// 如果为空则当前节点为树根\r\n        }\r\n        // 如果有就添加\r\n        if(currentParent){\r\n            node.parent = currentParent;\r\n            // 把自己添加给父元素\r\n            currentParent.children.push(node);\r\n        }\r\n        stack.push(node);\r\n        currentParent = node;\r\n    }\r\n    /**\r\n     * 处理解析匹配到的文本\r\n     * @param {匹配到的文本} text \r\n     */\r\n    function chars(text){\r\n        // console.log(text,\"文本\");\r\n        text.replace(/\\s/g,'') && currentParent.children.push({\r\n            type:TYPES.TEXT_TYPE,\r\n            text,\r\n            parent:currentParent\r\n        })\r\n    }\r\n    /**\r\n     * 处理解析匹配到的结束标签标签\r\n     * @param {匹配结束标签名} tag \r\n     */\r\n    function end(tag){\r\n        // console.log(tag,\"结束\");\r\n        let node = stack.pop();// 弹出最后一个元素\r\n        // 更新currentParent\r\n        currentParent = stack[stack.length-1];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {缩短的距离} len \r\n     */\r\n    function advance(len){  \r\n        html = html.substring(len);\r\n    }\r\n    /**\r\n     * 将html中的开始标签中的 标签名 和属性解析出来\r\n     * 并删除匹配到的内容\r\n     * @returns {{tagName:'',attrs:[]}}\r\n     */\r\n    function parseStartTag(){\r\n        let start = html.match(startTagOpen);\r\n        if(start){\r\n            const match = {\r\n                tagName:start[1],// 标签名命名\r\n                attrs:[]\r\n            }\r\n            advance(start[0].length)\r\n\r\n            // 如果不是结束标签就一直匹配\r\n            let attr,end;\r\n            while(\r\n                !(end = html.match(startTagClose)) && \r\n                (attr = html.match(attribute))\r\n            ){\r\n                advance(attr[0].length);\r\n                // console.log({\r\n                //     name:attr[1],\r\n                //     value:attr[3]||attr[4]||attr[5]\r\n                //   });\r\n                match.attrs.push({\r\n                    name:attr[1],\r\n                    value:attr[3]||attr[4]||attr[5]\r\n                })\r\n            }\r\n            if(end){\r\n                advance(end[0].length)\r\n            }\r\n            // console.log(html);// 将< id=\"app\">内容解析完毕\r\n            return match;\r\n        }\r\n\r\n        return false;// 不是开始标签\r\n    }\r\n    // 当html被截取完了就停止了\r\n    while(html){\r\n        // console.log(html.indexOf('<'));<div>123</div>\r\n        // 如果indexOf中的索引是0，说明是个标签，\r\n        // 如果indexOf中的索引>0，则说明是结束标签位置\r\n        let textEnd = html.indexOf('<');\r\n        if(textEnd === 0){\r\n            const startTagMatch = parseStartTag();\r\n            if(startTagMatch){\r\n                // console.log(\"开始标签 和属性\",startTagMatch);\r\n\r\n                start(startTagMatch.tagName,startTagMatch.attrs)\r\n                // 跳过本次循环\r\n                continue;\r\n            }\r\n\r\n            // 第一次匹配开始标签，后面的循环会进入匹配结束标签\r\n            const endTagMatch = html.match(endTag);\r\n            if(endTagMatch){\r\n                // console.log(\"结束标签\",endTagMatch);\r\n                end(endTagMatch[1]);\r\n                advance(endTagMatch[0].length);\r\n                continue;\r\n            }\r\n        }\r\n        //>0 textEnd是下一次循环的重新获得的值\r\n        if(textEnd>0){\r\n            // 继续截取文本内容 (中间可能是文本，或者空格)\r\n            let text = html.substring(0,textEnd);// 匹配到的文本\r\n            if(text){\r\n                chars(text);\r\n                advance(text.length);\r\n                // console.log(\"匹配到的文本:\",text);\r\n                // console.log(\"待解析的字符串:\",html);\r\n            }\r\n        }\r\n    }\r\n    // console.log(html,root);\r\n    return root;\r\n}\r\n/**\r\n * 将template转换为ast语法树\r\n * 生成render函数（render方法执行后的返回的结果就是 虚拟dom）\r\n * @param {带解析的模板} template \r\n */\r\nexport function compileToFunction(template){\r\n\r\n    let ast = parseHTML(template);\r\n    console.log(ast);\r\n}","// 重写数组中的部分方法\r\n\r\nlet oldArrayProto = Array.prototype;// 获取数组的原型\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\nlet methods = [// 找到所有的变异方法\r\n  'push','pop','shift','unshift','reverse','sort','splice'\r\n];\r\n// concat slice 不会改变原来的数据\r\nmethods.forEach(method=>{\r\n  // 代理newArrayProto身上的方法\r\n  newArrayProto[method] = function(...args){// 重写数组的方法\r\n    // console.log(\"method\",method);\r\n    // console.log(\"args\",args);\r\n    // 内部调用原来的方法 函数的劫持，切片编程\r\n    const result = oldArrayProto[method].call(this,...args);\r\n    // 对新添加的数据，再次进行劫持\r\n    let inserted;// 需要进行劫持的代码\r\n    let ob = this.__ob__;// 拿到Observe\r\n    switch(method){\r\n      case 'push':\r\n      case 'unshift':\r\n        inserted = args;\r\n        break;\r\n      case 'splice': // arr.splice(0,1,{a:1},{b:2})\r\n        // 前两个参数是方法用的，需要截取一下，获取实际参数\r\n        inserted = args.slice(2)\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"inserted\",inserted);\r\n    if(inserted){\r\n      // 对新增的内容进行观测\r\n      ob.observeArray(inserted)\r\n    }\r\n    return result;\r\n  }\r\n})","import { newArrayProto } from \"./array\";\r\n\r\n/**\r\n * 该对象上有一些方法，调用这些方法可以对数据进行响应式代理\r\n */\r\nclass Observe{\r\n  // 一开始进入该方法，一定是一个对象，然后才是其他东西\r\n  constructor(data){\r\n    // 想当于给数据加了一个标识，如果数据上有这个属性，说明被观测过\r\n    // data.__ob__ = this;// Observe对象挂载到数据身上，方便使用\r\n    Object.defineProperty(data,'__ob__',{\r\n      value:this, \r\n      enumerable:false\r\n    })\r\n    // 判断用户是否是一个数组\r\n    if(Array.isArray(data)){\r\n      // 重写数组的方法 7的变异方法 可以修改数组本身\r\n      // 调用data向上查询方法的时候，被调用被劫持的函数\r\n      data.__proto__ = newArrayProto;\r\n      // \"[a,{b:13}]\",数组中的对象要进行响应式劫持\r\n      this.observeArray(data);\r\n    }else{// 不是数组的情况\r\n      this.walk(data);\r\n    }\r\n  }\r\n  /**\r\n   * 循环该对象所有keys，对所有属性进行代理劫持\r\n   * @param {待劫持的数据对象} data \r\n   */\r\n  walk(data){\r\n    // 重新定义属性\r\n    Object.keys(data).forEach(key=> defineReactive(data,key,data[key]))\r\n  }\r\n  /**\r\n   * 监听数组中的对象数据\r\n   * @param {待监听的数据} data \r\n   */\r\n  observeArray(data){\r\n    // 对数组中的 对象 数据进行监听，不是对象的数据\r\n    // 被observe return掉了\r\n    data.forEach(item=>observe(item))\r\n  }\r\n}\r\n/**\r\n * \r\n * @param {重新定义数据的目标} target \r\n * @param {目标的key} key \r\n * @param {目标的value} value \r\n */\r\nexport function defineReactive(target,key,value){\r\n  // 使用递归，对值为对象的数据，再次进行劫持\r\n  observe(value);// 内部进行判断，如果value不是对象，则结束调用\r\n  Object.defineProperty(target,key,{\r\n    // 取值的时候\r\n    get(){\r\n      return value;\r\n    },\r\n    // 修改的时候\r\n    set(newValue){\r\n      if(newValue===value)return;\r\n      // 如果设置的值是一个对象，继续进行代理\r\n      observe(newValue);\r\n      value = newValue;\r\n    }\r\n  })\r\n\r\n}\r\n/**\r\n * 劫持用户的数据，进行响应式代理\r\n * 会判断用户的数据里面是不是还是对象\r\n * 如果还是对象，则会递归调用代理\r\n * @param {用户选项data中的数据} data \r\n */\r\nexport function observe(data){\r\n  if(typeof data !== 'object'||data === null){\r\n    return;// 只对对象做劫持\r\n  }\r\n  \r\n  // 如果一个对象被劫持了，那就不需要再被劫持了\r\n  // 要判断一个对象是否被劫持过了，\r\n  // 可以增添一个实例，用实例来判断是否被劫持过\r\n  if(data.__ob__ instanceof Observe){\r\n    // 标识该对象已经被代理过了\r\n    return data.__ob__;\r\n  }\r\n\r\n  return new Observe(data);\r\n}","import { observe } from \"./observe/index\";\r\n\r\n/**\r\n * 初始化用户状态 data,props,methods,watch...\r\n * @param {Vue实例对象} vm \r\n */\r\nexport function initState(vm){\r\n  const opts = vm.$options;// 获取所有的选项\r\n  // if(opts.props){\r\n  //   initProps\r\n  // }\r\n  if(opts.data){\r\n    initData(vm)\r\n  }\r\n}\r\n/**\r\n * \r\n * @param {实例} vm \r\n * @param {代理数据} target \r\n * @param {代理数据的key} key \r\n */\r\nfunction proxy(vm,target,key){\r\n  // vm.name ==> vm._data.name\r\n  Object.defineProperty(vm,key,{\r\n    get(){\r\n      return vm[target][key]\r\n    },\r\n    set(newValue){\r\n      vm[target][key] = newValue\r\n    }\r\n  })\r\n}\r\n/**\r\n * 对 options.data 数据进行响应式拦截\r\n * @param {Vue实例对象} vm \r\n */\r\nfunction initData(vm){\r\n  // 将对象上的数据重新 赋值了一份，data和源对象断开连接\r\n  let data = vm.$options.data;// 可能是函数或对象\r\n  data = typeof data === 'function'?data.call(vm):data;\r\n  // 给实例对象设置上data，可以获取到代理劫持后的数据\r\n  vm._data = data\r\n  // 对数据进行劫持 vue2采用defineProperty\r\n  observe(data);\r\n  // 将vm._data上的所有数据代理直接代理到实例对象上\r\n  for(let key in data){\r\n    proxy(vm,'_data',key)\r\n  }\r\n\r\n}","import { compileToFunction } from \"./compiler/index\";\r\nimport { initState } from \"./state\";\r\n\r\n/**\r\n * 用于给Vue实例身上拓展方法\r\n * @param {Vue实例对象} Vue \r\n */\r\nexport function initMixin(Vue){\r\n  /**\r\n   * 用于初始化操作\r\n   */\r\n  Vue.prototype._init = function(options){\r\n    const vm = this;\r\n    // 将用户传入的配置数据装载到Vue实例身上，方便其他方法获取配置数据\r\n    vm.$options = options;\r\n    \r\n    initState(vm);\r\n    if(options.el){\r\n      vm.$mount(options.el)\r\n    }\r\n\r\n  } \r\n  /**\r\n   * 对根元素，或者自定义模板，进行模板解析\r\n   * @param {根元素} el \r\n   */\r\n  Vue.prototype.$mount = function(el){\r\n    console.log(el);\r\n    const vm = this;\r\n    el = document.querySelector(el);\r\n    let ops = vm.$options;\r\n    // 如果没有render函数\r\n    if(!ops.render){\r\n      let template;\r\n      // 没有写模板，但是有el，使用 #app内部的元素作为模板渲染数据\r\n      if(!ops.template&&el){\r\n        template = el.outerHTML\r\n      }else{\r\n        // 写了模板\r\n        if(el){\r\n          template = ops.template\r\n        }\r\n      }\r\n      if(template){\r\n        // 需要对模板进行编译 生成render函数\r\n        const render = compileToFunction(template);\r\n        ops.render = render;\r\n      }\r\n    }\r\n    // 有render方法\r\n    ops.render;// 最终就获取render方法\r\n  }\r\n}\r\n","import { initMixin } from \"./init\";\r\n\r\n\r\n\r\n/**\r\n * options:用户传入的选项 data,methods,computed,mounted....\r\n * \r\n */\r\nfunction Vue(options){\r\n  // initMixin在Vue对象上拓展的_init方法的方法\r\n  this._init(options)\r\n}\r\ninitMixin(Vue)\r\n\r\nexport default Vue;"],"names":["ncname","qnameCapture","concat","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","TYPES","ELEMENT_TYPE","TEXT_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","push","chars","text","replace","end","pop","length","advance","len","substring","parseStartTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","compileToFunction","template","ast","console","log","oldArrayProto","Array","prototype","newArrayProto","Object","create","methods","forEach","method","_oldArrayProto$method","_len","arguments","args","_key","result","call","apply","inserted","ob","__ob__","slice","observeArray","Observe","data","_classCallCheck","defineProperty","enumerable","isArray","__proto__","walk","_createClass","key","keys","defineReactive","item","observe","target","get","set","newValue","_typeof","initState","vm","opts","$options","initData","proxy","_data","initMixin","Vue","_init","options","el","$mount","document","querySelector","ops","render","outerHTML"],"mappings":"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"}