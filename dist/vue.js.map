{"version":3,"file":"vue.js","sources":["../src/compiler/parse.js","../src/compiler/codegen.js","../src/compiler/index.js","../src/lifecycle.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["// 匹配 a-zA-Z_其中的一个 匹配多个满足 -.0-9_a-zA-Z\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;//?可有可无\r\n\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`);// <div | <a:b\r\n// console.log(startTagOpen);// 匹配到一个标签名\r\nconst endTag =  new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);// </div |></div:aa>\r\n// console.log(endTag);// \r\n\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>']+)))?/;\r\n// console.log(attribute);// dd=\"bb\" 一共五个分组 匹配345分组\r\nconst startTagClose = /^\\s*(\\/?)>/;\r\n// console.log(startTagClose);// div> | br/>\r\nexport const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\r\n// console.log(defaultTagRE);//{{}}\r\n\r\n    \r\nexport const TYPES = {\r\n  ELEMENT_TYPE:1,\r\n  TEXT_TYPE:3\r\n}\r\n/**\r\n * 解析html,生成抽象语法树\r\n * @param {带解析的html} html \r\n * @returns node\r\n */\r\nexport function parseHTML(html){\r\n    const stack = [];// 用于存放元素；由 start,chars,end三个方法共同构建的树\r\n    let currentParent;// 指向栈中的最后一个元素\r\n    \r\n    // 最终的抽象语法树\r\n    let root;// 根节点\r\n    /**\r\n     * 创建一个抽象节点\r\n     * @param {元素标签名} tag \r\n     * @param {元素属性} attrs \r\n     * @returns 返回一个对象\r\n     */\r\n    function createASTElement(tag,attrs){\r\n        return {\r\n            tag,\r\n            type:TYPES.ELEMENT_TYPE,\r\n            children:[],\r\n            attrs,\r\n            parent:null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理解析匹配到的开始标签和内容\r\n     * @param {匹配开始标签名} tag \r\n     * @param {匹配开始标签属性} attrs \r\n     */\r\n    function start(tag,attrs){\r\n        // console.log(tag,attrs,\"开始\");\r\n        let node = createASTElement(tag,attrs);\r\n        if(!root){// 看一下是否是空树\r\n            root = node;// 如果为空则当前节点为树根\r\n        }\r\n        // 如果有就添加\r\n        if(currentParent){\r\n            node.parent = currentParent;\r\n            // 把自己添加给父元素\r\n            currentParent.children.push(node);\r\n        }\r\n        stack.push(node);\r\n        currentParent = node;\r\n    }\r\n    /**\r\n     * 处理解析匹配到的文本\r\n     * @param {匹配到的文本} text \r\n     */\r\n    function chars(text){\r\n        // console.log(text,\"文本\");\r\n        text.replace(/\\s/g,'') && currentParent.children.push({\r\n            type:TYPES.TEXT_TYPE,\r\n            text,\r\n            parent:currentParent\r\n        })\r\n    }\r\n    /**\r\n     * 处理解析匹配到的结束标签标签\r\n     * @param {匹配结束标签名} tag \r\n     */\r\n    function end(tag){\r\n        // console.log(tag,\"结束\");\r\n        let node = stack.pop();// 弹出最后一个元素\r\n        // 更新currentParent\r\n        currentParent = stack[stack.length-1];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {缩短的距离} len \r\n     */\r\n    function advance(len){  \r\n        html = html.substring(len);\r\n    }\r\n    /**\r\n     * 将html中的开始标签中的 标签名 和属性解析出来\r\n     * 并删除匹配到的内容\r\n     * @returns {{tagName:'',attrs:[]}}\r\n     */\r\n    function parseStartTag(){\r\n        let start = html.match(startTagOpen);\r\n        if(start){\r\n            const match = {\r\n                tagName:start[1],// 标签名命名\r\n                attrs:[]\r\n            }\r\n            advance(start[0].length)\r\n\r\n            // 如果不是结束标签就一直匹配\r\n            let attr,end;\r\n            while(\r\n                !(end = html.match(startTagClose)) && \r\n                (attr = html.match(attribute))\r\n            ){\r\n                advance(attr[0].length);\r\n                // console.log({\r\n                //     name:attr[1],\r\n                //     value:attr[3]||attr[4]||attr[5]\r\n                //   });\r\n                match.attrs.push({\r\n                    name:attr[1],\r\n                    value:attr[3]||attr[4]||attr[5]\r\n                })\r\n            }\r\n            if(end){\r\n                advance(end[0].length)\r\n            }\r\n            // console.log(html);// 将< id=\"app\">内容解析完毕\r\n            return match;\r\n        }\r\n\r\n        return false;// 不是开始标签\r\n    }\r\n    // 当html被截取完了就停止了\r\n    while(html){\r\n        // console.log(html.indexOf('<'));<div>123</div>\r\n        // 如果indexOf中的索引是0，说明是个标签，\r\n        // 如果indexOf中的索引>0，则说明是结束标签位置\r\n        let textEnd = html.indexOf('<');\r\n        if(textEnd === 0){\r\n            const startTagMatch = parseStartTag();\r\n            if(startTagMatch){\r\n                // console.log(\"开始标签 和属性\",startTagMatch);\r\n\r\n                start(startTagMatch.tagName,startTagMatch.attrs)\r\n                // 跳过本次循环\r\n                continue;\r\n            }\r\n\r\n            // 第一次匹配开始标签，后面的循环会进入匹配结束标签\r\n            const endTagMatch = html.match(endTag);\r\n            if(endTagMatch){\r\n                // console.log(\"结束标签\",endTagMatch);\r\n                end(endTagMatch[1]);\r\n                advance(endTagMatch[0].length);\r\n                continue;\r\n            }\r\n        }\r\n        //>0 textEnd是下一次循环的重新获得的值\r\n        if(textEnd>0){\r\n            // 继续截取文本内容 (中间可能是文本，或者空格)\r\n            let text = html.substring(0,textEnd);// 匹配到的文本\r\n            if(text){\r\n                chars(text);\r\n                advance(text.length);\r\n                // console.log(\"匹配到的文本:\",text);\r\n                // console.log(\"待解析的字符串:\",html);\r\n            }\r\n        }\r\n    }\r\n    // console.log(html,root);\r\n    return root;\r\n}","import { TYPES,defaultTagRE } from \"./parse.js\";\r\n/**\r\n * 解析抽象语法树中的属性\r\n * @param {属性} attrs \r\n * @returns \r\n */\r\nfunction genProps(attrs){\r\n    let str = '';// {name,value}\r\n    for(let i=0;i<attrs.length;i++){\r\n        let attr = attrs[i];\r\n        if(attr.name === 'style'){\r\n            let obj = {};\r\n            attr.value.split(\";\").forEach(item=>{\r\n                let [key,value] = item.split(':');\r\n                obj[key] = value;\r\n            })\r\n            attr.value = obj;\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},`\r\n    }\r\n    return `{${str.slice(0,-1)}}`;\r\n}\r\n/**\r\n * 处理元素节点继续转换成抽象语法树\r\n * 处理文本节点\r\n * @param {*} node \r\n * @returns \r\n */\r\nfunction gen(node){\r\n    \r\n    if(node.type=== TYPES.ELEMENT_TYPE){// ele:1,text:3\r\n        return codegen(node);\r\n    }else{\r\n        // 文本\r\n        \r\n        let text = node.text.trim()\r\n        // test方法会向后继续匹配\r\n        if(!defaultTagRE.test(text)){\r\n            // console.log(text,\"没有{{}}\");\r\n            return `_v(${JSON.stringify(text)})`\r\n        }else{\r\n            // console.log(text,\"包含{{}}\");\r\n            let tokens = [];\r\n            let match;\r\n            defaultTagRE.lastIndex = 0;\r\n            let lastIndex = 0;\r\n            while(match = defaultTagRE.exec(text)){\r\n                // console.log(match[1]);\r\n                let index = match.index;// 匹配的位置{{name}}123{{age}}456789\r\n                // console.log('-'+text+'-','====',match,\"==\",index,\"匹配的索引位置\");\r\n                if(index>lastIndex){\r\n                    // 123\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex,index)))\r\n                }\r\n                // {{name}}\r\n                tokens.push(`_s(${match[1].trim()})`);\r\n                lastIndex = index + match[0].length;\r\n            }\r\n            if(lastIndex<text.length){\r\n                // 456789\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n            }\r\n            return `_v(${tokens.join('+')})`\r\n\r\n        }\r\n    }\r\n}\r\n/**\r\n * 解析语法树中的孩子\r\n * @param {抽象语法树中的函数} children \r\n * @returns \r\n */\r\nfunction genChildren(children){\r\n    if(children){\r\n        return children.map(child=>gen(child)).join(',')\r\n    }\r\n}\r\n/**\r\n * 通过抽象语法树产生render函数\r\n * @param {抽象语法树} {tag: 'div', type: 1, children: Array(3), attrs: [{name:aa,value:bb}], parent: null}\r\n * @returns // _c(节点，属性，孩子)\r\n */\r\nexport function codegen(ast){\r\n    let children = genChildren(ast.children);\r\n    // _c(节点，属性，孩子)\r\n    let code = `\r\n    _c('${ast.tag}',\r\n        ${ast.attrs.length>0?genProps(ast.attrs):'null'}\r\n        ${ast.children.length>0?`,${children}`:''}\r\n    )`;\r\n    return code\r\n}","import { parseHTML } from \"./parse.js\";\r\nimport { codegen } from \"./codegen\";\r\n\r\n/**\r\n * 将template转换为ast语法树\r\n * 生成render函数（render方法执行后的返回的结果就是 虚拟dom）\r\n * @param {带解析的模板} template \r\n */\r\nexport function compileToFunction(template){\r\n\r\n    let ast = parseHTML(template);\r\n    // console.log(ast);\r\n    // 将抽象语法树，转换为render函数 _c创建元素，_v创建文本 _s=>JSON.stringif()\r\n    // 模板引擎的原理，with + new Function\r\n    let code = codegen(ast);\r\n    code = `with(this){return ${code}}`;\r\n    // 根据代码生成render函数\r\n    let render = new Function(code);\r\n    return render;\r\n    \r\n}","/**\r\n * 给Vues实例身上拓展方法\r\n * @param {*} Vue \r\n */\r\nexport function initLifeCycle(Vue){\r\n\tVue.prototype._update = function(){\r\n\t\tconsole.log(\"update\");\r\n\t}\r\n\tVue.prototype._render = function(){\r\n\t\tconsole.log(\"render\");\r\n\t}\t\r\n}\r\n/**\r\n * \r\n * @param {vue实例} vm \r\n * @param {渲染根节点} el \r\n */\r\nexport function mountComponent(vm,el){\r\n\t// 1.调用render方法产生虚拟节点 虚拟dom\r\n\tlet vmDom = vm._render();// vm.$options.render()\r\n\t// 2、根据虚拟DOM产生真实dom\r\n\tvm._update(vmDom);\r\n\r\n\t// 3.将真实dom插入到el元素中\r\n}\r\n// 创造响应式数据，\r\n// 模板转换成ast语法树，\r\n// 将ast树转换为render函数(产生虚拟节点，使用响应式数据)，\r\n// 每次节点更新可以只执行render函数\r\n// 根据虚拟节点创造真实dom\r\n","// 重写数组中的部分方法\r\n\r\nlet oldArrayProto = Array.prototype;// 获取数组的原型\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\nlet methods = [// 找到所有的变异方法\r\n  'push','pop','shift','unshift','reverse','sort','splice'\r\n];\r\n// concat slice 不会改变原来的数据\r\nmethods.forEach(method=>{\r\n  // 代理newArrayProto身上的方法\r\n  newArrayProto[method] = function(...args){// 重写数组的方法\r\n    // console.log(\"method\",method);\r\n    // console.log(\"args\",args);\r\n    // 内部调用原来的方法 函数的劫持，切片编程\r\n    const result = oldArrayProto[method].call(this,...args);\r\n    // 对新添加的数据，再次进行劫持\r\n    let inserted;// 需要进行劫持的代码\r\n    let ob = this.__ob__;// 拿到Observe\r\n    switch(method){\r\n      case 'push':\r\n      case 'unshift':\r\n        inserted = args;\r\n        break;\r\n      case 'splice': // arr.splice(0,1,{a:1},{b:2})\r\n        // 前两个参数是方法用的，需要截取一下，获取实际参数\r\n        inserted = args.slice(2)\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"inserted\",inserted);\r\n    if(inserted){\r\n      // 对新增的内容进行观测\r\n      ob.observeArray(inserted)\r\n    }\r\n    return result;\r\n  }\r\n})","import { newArrayProto } from \"./array\";\r\n\r\n/**\r\n * 该对象上有一些方法，调用这些方法可以对数据进行响应式代理\r\n */\r\nclass Observe{\r\n  // 一开始进入该方法，一定是一个对象，然后才是其他东西\r\n  constructor(data){\r\n    // 想当于给数据加了一个标识，如果数据上有这个属性，说明被观测过\r\n    // data.__ob__ = this;// Observe对象挂载到数据身上，方便使用\r\n    Object.defineProperty(data,'__ob__',{\r\n      value:this, \r\n      enumerable:false\r\n    })\r\n    // 判断用户是否是一个数组\r\n    if(Array.isArray(data)){\r\n      // 重写数组的方法 7的变异方法 可以修改数组本身\r\n      // 调用data向上查询方法的时候，被调用被劫持的函数\r\n      data.__proto__ = newArrayProto;\r\n      // \"[a,{b:13}]\",数组中的对象要进行响应式劫持\r\n      this.observeArray(data);\r\n    }else{// 不是数组的情况\r\n      this.walk(data);\r\n    }\r\n  }\r\n  /**\r\n   * 循环该对象所有keys，对所有属性进行代理劫持\r\n   * @param {待劫持的数据对象} data \r\n   */\r\n  walk(data){\r\n    // 重新定义属性\r\n    Object.keys(data).forEach(key=> defineReactive(data,key,data[key]))\r\n  }\r\n  /**\r\n   * 监听数组中的对象数据\r\n   * @param {待监听的数据} data \r\n   */\r\n  observeArray(data){\r\n    // 对数组中的 对象 数据进行监听，不是对象的数据\r\n    // 被observe return掉了\r\n    data.forEach(item=>observe(item))\r\n  }\r\n}\r\n/**\r\n * \r\n * @param {重新定义数据的目标} target \r\n * @param {目标的key} key \r\n * @param {目标的value} value \r\n */\r\nexport function defineReactive(target,key,value){\r\n  // 使用递归，对值为对象的数据，再次进行劫持\r\n  observe(value);// 内部进行判断，如果value不是对象，则结束调用\r\n  Object.defineProperty(target,key,{\r\n    // 取值的时候\r\n    get(){\r\n      return value;\r\n    },\r\n    // 修改的时候\r\n    set(newValue){\r\n      if(newValue===value)return;\r\n      // 如果设置的值是一个对象，继续进行代理\r\n      observe(newValue);\r\n      value = newValue;\r\n    }\r\n  })\r\n\r\n}\r\n/**\r\n * 劫持用户的数据，进行响应式代理\r\n * 会判断用户的数据里面是不是还是对象\r\n * 如果还是对象，则会递归调用代理\r\n * @param {用户选项data中的数据} data \r\n */\r\nexport function observe(data){\r\n  if(typeof data !== 'object'||data === null){\r\n    return;// 只对对象做劫持\r\n  }\r\n  \r\n  // 如果一个对象被劫持了，那就不需要再被劫持了\r\n  // 要判断一个对象是否被劫持过了，\r\n  // 可以增添一个实例，用实例来判断是否被劫持过\r\n  if(data.__ob__ instanceof Observe){\r\n    // 标识该对象已经被代理过了\r\n    return data.__ob__;\r\n  }\r\n\r\n  return new Observe(data);\r\n}","import { observe } from \"./observe/index\";\r\n\r\n/**\r\n * 初始化用户状态 data,props,methods,watch...\r\n * @param {Vue实例对象} vm \r\n */\r\nexport function initState(vm){\r\n  const opts = vm.$options;// 获取所有的选项\r\n  // if(opts.props){\r\n  //   initProps\r\n  // }\r\n  if(opts.data){\r\n    initData(vm)\r\n  }\r\n}\r\n/**\r\n * \r\n * @param {实例} vm \r\n * @param {代理数据} target \r\n * @param {代理数据的key} key \r\n */\r\nfunction proxy(vm,target,key){\r\n  // vm.name ==> vm._data.name\r\n  Object.defineProperty(vm,key,{\r\n    get(){\r\n      return vm[target][key]\r\n    },\r\n    set(newValue){\r\n      vm[target][key] = newValue\r\n    }\r\n  })\r\n}\r\n/**\r\n * 对 options.data 数据进行响应式拦截\r\n * @param {Vue实例对象} vm \r\n */\r\nfunction initData(vm){\r\n  // 将对象上的数据重新 赋值了一份，data和源对象断开连接\r\n  let data = vm.$options.data;// 可能是函数或对象\r\n  data = typeof data === 'function'?data.call(vm):data;\r\n  // 给实例对象设置上data，可以获取到代理劫持后的数据\r\n  vm._data = data\r\n  // 对数据进行劫持 vue2采用defineProperty\r\n  observe(data);\r\n  // 将vm._data上的所有数据代理直接代理到实例对象上\r\n  for(let key in data){\r\n    proxy(vm,'_data',key)\r\n  }\r\n\r\n}","import { compileToFunction } from \"./compiler/index\";\r\nimport { mountComponent } from \"./lifecycle\";\r\nimport { initState } from \"./state\";\r\n\r\n/**\r\n * 用于给Vue实例身上拓展方法\r\n * @param {Vue实例对象} Vue \r\n */\r\nexport function initMixin(Vue) {\r\n\t/**\r\n\t * 用于初始化操作\r\n\t */\r\n\tVue.prototype._init = function (options) {\r\n\t\tconst vm = this;\r\n\t\t// 将用户传入的配置数据装载到Vue实例身上，方便其他方法获取配置数据\r\n\t\tvm.$options = options;\r\n\r\n\t\tinitState(vm);\r\n\t\tif (options.el) {\r\n\t\t\tvm.$mount(options.el)\r\n\t\t}\r\n\r\n\t}\r\n\t/**\r\n\t * 对根元素，或者自定义模板，进行模板解析\r\n\t * @param {根元素} el \r\n\t */\r\n\tVue.prototype.$mount = function (el) {\r\n\t\t// console.log(el);\r\n\t\tconst vm = this;\r\n\t\tel = document.querySelector(el);\r\n\t\tlet ops = vm.$options;\r\n\t\t// 如果没有render函数\r\n\t\tif (!ops.render) {\r\n\t\t\tlet template;\r\n\t\t\t// 没有写模板，但是有el，使用 #app内部的元素作为模板渲染数据\r\n\t\t\tif (!ops.template && el) {\r\n\t\t\t\ttemplate = el.outerHTML\r\n\t\t\t} else {\r\n\t\t\t\t// 写了模板\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\ttemplate = ops.template\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (template) {\r\n\t\t\t\t// 需要对模板进行编译 生成render函数\r\n\t\t\t\tconst render = compileToFunction(template);\r\n\t\t\t\tops.render = render;// jsx 最终会被 编译成h('xxx')\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 有render方法\r\n\t\t// ops.render;// 最终就获取render方法\r\n\r\n\t\tmountComponent(vm, el);// 组件的挂载\r\n\t}\r\n\r\n}\r\n","import { initMixin } from \"./init\";\r\nimport { initLifeCycle } from \"./lifecycle\";\r\n\r\n\r\n\r\n/**\r\n * options:用户传入的选项 data,methods,computed,mounted....\r\n * \r\n */\r\nfunction Vue(options){\r\n  // initMixin在Vue对象上拓展的_init方法的方法\r\n  this._init(options)\r\n}\r\n\r\ninitMixin(Vue);\r\n\r\ninitLifeCycle(Vue);\r\n\r\nexport default Vue;\r\n"],"names":["ncname","qnameCapture","concat","startTagOpen","RegExp","endTag","attribute","startTagClose","defaultTagRE","TYPES","ELEMENT_TYPE","TEXT_TYPE","parseHTML","html","stack","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","push","chars","text","replace","end","pop","length","advance","len","substring","parseStartTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","_loop","i","obj","split","forEach","item","_item$split","_item$split2","_slicedToArray","key","JSON","stringify","slice","gen","codegen","trim","test","tokens","lastIndex","exec","index","join","genChildren","map","child","ast","code","compileToFunction","template","render","Function","initLifeCycle","Vue","prototype","_update","console","log","_render","mountComponent","vm","el","vmDom","oldArrayProto","Array","newArrayProto","Object","create","methods","method","_oldArrayProto$method","_len","arguments","args","_key","result","call","apply","inserted","ob","__ob__","observeArray","Observe","data","_classCallCheck","defineProperty","enumerable","isArray","__proto__","walk","_createClass","keys","defineReactive","observe","target","get","set","newValue","_typeof","initState","opts","$options","initData","proxy","_data","initMixin","_init","options","$mount","document","querySelector","ops","outerHTML"],"mappings":"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"}